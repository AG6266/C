#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    struct stat fileStat;

    if (stat(argv[1], &fileStat) == -1) {
        perror("stat");
        return 1;
    }

    printf("Inode Number: %ld\n", fileStat.st_ino);

    printf("File Type: ");
    if (S_ISREG(fileStat.st_mode)) {
        printf("Regular File\n");
    } else if (S_ISDIR(fileStat.st_mode)) {
        printf("Directory\n");
    } else if (S_ISLNK(fileStat.st_mode)) {
        printf("Symbolic Link\n");
    } else if (S_ISCHR(fileStat.st_mode)) {
        printf("Character Device\n");
    } else if (S_ISBLK(fileStat.st_mode)) {
        printf("Block Device\n");
    } else if (S_ISFIFO(fileStat.st_mode)) {
        printf("FIFO (Named Pipe)\n");
    } else if (S_ISSOCK(fileStat.st_mode)) {
        printf("Socket\n");
    } else {
        printf("Unknown\n");
    }

    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>

pid_t child_pid;

void handle_sigalrm(int sig) {
    printf(" Alarm triggered! Killing child process...\n");
    kill(child_pid, SIGKILL);
}

void handle_sigchld(int sig) {
    int status;
    waitpid(child_pid, &status, 0);
    printf("Child process terminated.\n");
    exit(0);
}

int main() {
    signal(SIGALRM, handle_sigalrm);
    signal(SIGCHLD, handle_sigchld);

    child_pid = fork();

    if (child_pid == 0) {
        // Child process: run a command (e.g., sleep 10)
        execlp("sleep", "sleep", "10", NULL);
        perror("execlp failed");
        exit(1);
    } else if (child_pid > 0) {
        // Parent process
        alarm(5); // Set 5-second timer
        while (1) {
            pause(); // Wait for signal
        }
    } else {
        perror("fork failed");
        return 1;
    }

    return 0;
}
