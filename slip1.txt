 #include <stdio.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <string.h>

// Function to print file information
void print_file_info(const char *filename) {
    struct stat fileStat;

    // Get file status
    if (stat(filename, &fileStat) < 0) {
        perror("Could not get file status");
        return;
    }

    // Print file name and inode number
    printf("File: %s\n", filename);
    printf("Inode Number: %lu\n", fileStat.st_ino);

    // Determine file type
    printf("File Type: ");
    switch (fileStat.st_mode & S_IFMT) {
        case S_IFREG:
            printf("Regular File\n");
            break;
        case S_IFDIR:
            printf("Directory\n");
            break;
        case S_IFLNK:
            printf("Symbolic Link\n");
            break;
        case S_IFBLK:
            printf("Block Device\n");
            break;
        case S_IFCHR:
            printf("Character Device\n");
            break;
        case S_IFIFO:
            printf("FIFO / Pipe\n");
            break;
        case S_IFSOCK:
            printf("Socket\n");
            break;
        default:
            printf("Unknown Type\n");
            break;
    }

    printf("\n");
}

// Main function
int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        exit(1);
    }

    // Loop through each file argument
    for (int i = 1; i < argc; i++) {
        print_file_info(argv[i]);
    }

    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/wait.h>

// Signal handler function
static void my_alarm(int signo) {
    printf("\nAlarm is fired! (Caught SIGALRM in parent process)\n");
}

int main() {
    pid_t pid;

    // Set up signal handler for SIGALRM
    signal(SIGALRM, my_alarm);

    // Create child process
    pid = fork();

    if (pid < 0) {
        perror("Fork error");
        exit(1);
    }
    else if (pid == 0) {
        // Child process
        printf("\n[Child] PID: %d\n", getpid());
        printf("[Child] Sending SIGALRM to parent (PID: %d)...\n", getppid());

        sleep(2); // Give parent time to set up handler
        kill(getppid(), SIGALRM); // Send signal to parent

        printf("[Child] Signal sent! Exiting child process.\n");
        exit(0);
    }
    else {
        // Parent process
        printf("\n[Parent] PID: %d\n", getpid());
        printf("[Parent] Waiting for SIGALRM from child...\n");

        // Wait for signal
        for (;;) {
            pause(); // Wait until a signal is caught
        }
    }

    return 0;
}
